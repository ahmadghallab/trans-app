scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type Query {
    stations: [Station!]! @paginate(defaultCount: 10)
    station(id: ID @eq): Station @find

    lines: [Line!]! @paginate(defaultCount: 10)
    line(id: ID @eq): Line @find

		trips: [Trip!]! @paginate(defaultCount: 10)
		trip(id: ID @eq): Trip @find

		me: User @auth(guard: "api")
}

type Mutation {
	# Station
	createStation(
		name: String! @rules(apply: ["required", "min:4", "unique:stations"])
		latitude: String! @rules(apply: ["required"])
		longitude: String @rules(apply: ["required"])
	): Station! @create

	updateStation(
		id: ID!
		name: String
		latitude: String
		longitude: String
	): Station @update

	deleteStation(
		id: ID!
	): Station @delete

	# Line
	createLine(
		name: String! @rules(apply: ["required", "min: 4", "unique:lines"])
	): Line! @create

	updateLine(
		id: ID!
		name: String
	): Line @update

	deleteLine(
		id: ID!
	): Line @delete

	# LineStation
	createLineStation(
		line: ID! @rules(apply: ["required"])
		station: ID! @rules(apply: ["required"])
	): LineStation! @create

	updateLineStation(
		id: ID!
		line: ID
		station: ID
	): LineStation @update

	deleteLineStation(
		id: ID!
	): LineStation @delete

	# User
	createUser(
		name: String! @rules(apply: ["required", "min:4"])
		email: String! @rules(apply: ["email", "unique:users"])
		password: String! @rules(apply: ["min:4"]) @bcrypt
		phone_number: String! @rules(apply: ["required", "min:11", "max:20"])
		role: String! @rules(apply: ["in:admin,driver,employee"])
	): User @create

	login(
		email: String!
		password: String!
	): String @field(resolver: "AuthMutator@login")

	# Trip
	createTrip(
		description: String! @rules(apply: ["required", "min:4"])
		line: ID! @rules(apply: ["required"])
		driver: ID! @rules(apply: ["required"])
		schedule_type: String! @rules(apply: ["required", "in:daily,weekly,monthly,yearly,custom"])
		schedule_time: DateTime
	): Trip @create

	# EmployeeTrip
	createEmployeeTrip(
		trip: ID! @rules(apply: ["required"])
		employee: ID! @rules(apply: ["required"])
	): EmployeeTrip
		@field(resolver: "EmployeeTripMutator@create")
		# @middleware(checks: ["auth:api"])

	joinTrip(id: ID!): EmployeeTrip
		@field(resolver: "EmployeeTripMutator@join")

	sendConfirmation(id: ID!): EmployeeTrip
		@field(resolver: "EmployeeTripMutator@sendConfirmation")

	confirmTrip(id: ID!): EmployeeTrip
		@field(resolver: "EmployeeTripMutator@confirm")
	
}

type EmployeeTrip {
	id: ID!
	trip: Trip! @belongsTo
	employee: User! @belongsTo
	subscribed_at: DateTime
	confirmation_sent_at: DateTime
	confirmed_at: DateTime
}

type Trip {
	id: ID!
	description: String!
	line: Line! @belongsTo
	driver: User! @belongsTo
	schedule_type: String!
	schedule_time: DateTime!
	subscriptions: [EmployeeTrip!]! @hasMany
}

type User {
	id: ID!
	name: String!
	email: String!
	phone_number: String!
	role: String!
}

type Station {
	id: ID!
	name: String!
	latitude: String!
	longitude: String!
}

type Line {
	id: ID!
	name: String!
	stations: [Station!]! @belongsToMany
}

type LineStation {
	id: ID!
	line: ID!
	station: ID!
}
